Challenge 0 (20 points)

Given a non-empty string and an int n, return a new string where the char at index n has been removed. Assume that n is a valid index (n is in the range 0..str.length()-1 inclusive). 

removeChar("kfupm", 1) ? "kupm"
removeChar("kfupm", 0) ? "fupm"
removeChar("kfupm", 4) ? "kfup"



Challenge 1 (20 points)


Given a non-empty string and two integers i and j, return the string after deleting all characters between i and j.
Assume that i and j are valid indices where i is smaller than j.

removeChunk("SummerRobot", 3, 5) --> "SumrRobot"
removeChunk("Temime", 0, 6) --> ""
removeChunk("hackathon", 0,1) --> "ackathon"


Challenge 6 (30 points)
Given an array of integers a and a target value, return the indices of two numbers inside the array such that they add up to the target value. The two indices should be returned in an array of size 2.

You may assume that each input would have exactly one solution.

TwoSum({2, 7, 11, 15}, 9) --> {0,1} (because a[0] + a[1] = 9)
TwoSum({8, 10, 11, 1, 4}, 15) --> {2,4} (because a[2] + a[4] = 15)
TwoSum({2, 7, 11, 15}, 9) --> {0,1} (because a[0] + a[1] = 9)


Challenge 7 (30 points)

Given an array of integers a and an integer value k, return the k most frequent elements in a.

mostFrequent({1, 1, 1, 2, 2, 3}, 2) ==> {1, 2} (because 1 and 2 are the 2 most frequent elements)
mostFrequent({1, 1, 2, 3, 3, 4, 4, 4, 5}, 1) ==> {4}
mostFrequent({4,5,4,3,3,4,1,5},3) ==> {4,5,3}